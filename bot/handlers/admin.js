const UsersRepository = require("../../repositories/usersRepository");
const UsersHelper = require("../../services/usersHelper");
const BaseHandlers = require("./base");
const config = require("config");
const botConfig = config.get("bot");
const path = require("path");
const fs = require("fs");

class AdminHandlers extends BaseHandlers {
    constructor() {
        super();
    }

    forwardHandler(msg, text) {
        if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

        this.bot.sendMessage(botConfig.chats.main, text);
    }

    getLogHandler = (msg) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

        let logpath = path.join(__dirname, "../..", botConfig.logpath);

        if (fs.existsSync(logpath)) this.bot.sendDocument(msg.chat.id, logpath);
    };

    getUsersHandler = (msg) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

        let users = UsersRepository.getUsers();
        let userList = "";
        for (const user of users) {
            userList += `> ${this.bot.formatUsername(user.username)}
Roles: ${user.roles}${user.mac ? `\nMAC: ${user.mac}` : ""}${user.birthday ? `\nBirthday: ${user.birthday}` : ""}
Autoinside: ${user.autoinside ? "on" : "off"}\n`;
        }

        this.bot.sendLongMessage(msg.chat.id, `üë©‚Äçüíª –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n` + userList);
    };

    addUserHandler = (msg, username, roles) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

        username = username.replace("@", "");
        roles = roles.split("|");

        let success = UsersRepository.addUser(username, roles);
        let message = success
            ? `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${this.bot.formatUsername(username)} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ ${roles}`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –æ–Ω —É–∂–µ –µ—Å—Ç—å?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    updateRolesHandler = (msg, username, roles) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

        username = username.replace("@", "");
        roles = roles.split("|");

        let success = UsersRepository.updateRoles(username, roles);
        let message = success
            ? `‚ú≥Ô∏è –†–æ–ª–∏ ${this.bot.formatUsername(username)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ ${roles}`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    removeUserHandler = (msg, username) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

        username = username.replace("@", "");

        let success = UsersRepository.removeUser(username);
        let message = success
            ? `üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${this.bot.formatUsername(username)} —É–¥–∞–ª–µ–Ω`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };
}

module.exports = AdminHandlers;
