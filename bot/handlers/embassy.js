const TextGenerators = require("../../services/textGenerators");
const UsersHelper = require("../../services/usersHelper");
const config = require("config");
const embassyApiConfig = config.get("embassy-api");
const botConfig = config.get("bot");
const { fetchWithTimeout } = require("../../utils/network");
const BaseHandlers = require("./base");
const logger = require("../../services/logger");
const usersRepository = require("../../repositories/usersRepository");
const { encrypt } = require("../../utils/security");
const { isMacInside } = require("../../services/statusHelper");

class EmbassyHanlers extends BaseHandlers {
    constructor() {
        super();
    }

    unlockHandler = async (msg) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "member")) return;

        try {
            let devices = await (
                await fetchWithTimeout(
                    `${embassyApiConfig.host}:${embassyApiConfig.port}/${embassyApiConfig.devicesCheckingPath}`
                )
            )?.json();

            let currentUser = usersRepository.getUser(msg.from.username);

            if (!isMacInside(currentUser.mac, devices)) {
                this.bot.sendMessage(
                    msg.chat.id,
                    "‚ùå –¢–≤–æ–π MAC –∞–¥—Ä–µ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—É—Ç–µ—Ä–æ–º. –ù–∞–¥–æ –±—ã—Ç—å —Ä—è–¥–æ–º —Å–æ —Å–ø–µ–π—Å–æ–º, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å"
                );

                return;
            }

            let token = await encrypt(process.env["UNLOCKKEY"]);

            let response = await await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/unlock`, {
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
                method: "post",
                body: JSON.stringify({ token, from: msg.from.username }),
            });

            if (response.status === 200) {
                logger.info(`${msg.from.username} –æ—Ç–∫—Ä—ã–ª –¥–≤–µ—Ä—å`);
                await this.bot.sendMessage(msg.chat.id, "üîë –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞");
            } else throw Error("Request error");
        } catch (error) {
            let message = `‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`;
            this.bot.sendMessage(msg.chat.id, message);
            logger.error(error);
        }
    };

    webcamHandler = async (msg) => {
        await this.webcamGenericHandler(msg, "webcam", "–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂");
    };

    webcam2Handler = async (msg) => {
        await this.webcamGenericHandler(msg, "webcam2", "–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂");
    };

    doorcamHandler = async (msg) => {
        await this.webcamGenericHandler(msg, "doorcam", "–í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å");
    };

    webcamGenericHandler = async (msg, path, prefix) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "member")) return;

        try {
            let response = await (
                await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/${path}`)
            )?.arrayBuffer();

            let webcamImage = Buffer.from(response);

            if (webcamImage) await this.bot.sendPhoto(msg.chat.id, webcamImage);
            else throw Error("Empty webcam image");
        } catch (error) {
            let message = `‚ö†Ô∏è ${prefix}: –ö–∞–º–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`;
            await this.bot.sendMessage(msg.chat.id, message);
            logger.error(error);
        }
    };

    monitorHandler = async (msg, notifyEmpty = false) => {
        try {
            let statusMessages = await this.queryStatusMonitor();

            if (!notifyEmpty && statusMessages.length === 0) return;

            let message =
                statusMessages.length > 0 ? TextGenerators.getMonitorMessagesList(statusMessages) : "–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç";

            this.bot.sendMessage(msg.chat.id, message);
        } catch (error) {
            let message = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –º–æ–∂–µ—Ç, —á—Ç–æ-—Ç–æ —Å –∏–Ω–µ—Ç–æ–º, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º –∏–ª–∏ le-fail?`;
            this.bot.sendMessage(msg.chat.id, message);
            logger.error(error);
        }
    };

    queryStatusMonitor = async () => {
        return await (await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/statusmonitor`))?.json();
    };

    enableStatusMonitor() {
        setInterval(() => this.monitorHandler({ chat: { id: botConfig.chats.test } }), embassyApiConfig.queryMonitorInterval);
    }

    printersHandler = async (msg) => {
        let message = TextGenerators.getPrintersInfo();
        let inlineKeyboard = [
            [
                {
                    text: "–°—Ç–∞—Ç—É—Å Anette",
                    callback_data: JSON.stringify({ command: "/printerstatus anette" }),
                },
                {
                    text: "–°—Ç–∞—Ç—É—Å Plumbus",
                    callback_data: JSON.stringify({ command: "/printerstatus plumbus" }),
                },
            ],
        ];

        this.bot.sendMessage(msg.chat.id, message, {
            reply_markup: {
                inline_keyboard: inlineKeyboard,
            },
        });
    };

    printerStatusHandler = async (msg, printername) => {
        try {
            var { status, thumbnailBuffer, cam } = await (
                await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/printer?printername=${printername}`)
            ).json();

            if (status && !status.error) var message = await TextGenerators.getPrinterStatus(status);
            else throw Error();
        } catch (error) {
            logger.error(error);
            message = `‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`;
        } finally {
            if (cam) await this.bot.sendPhoto(msg.chat.id, Buffer.from(cam));

            let inlineKeyboard = [
                [
                    {
                        text: `–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å ${printername}`,
                        callback_data: JSON.stringify({ command: `/printerstatus ${printername}` }),
                    },
                ],
            ];

            if (thumbnailBuffer)
                await this.bot.sendPhoto(msg.chat.id, Buffer.from(thumbnailBuffer), {
                    caption: message,
                    reply_markup: {
                        inline_keyboard: inlineKeyboard,
                    },
                });
            else
                await this.bot.sendMessage(msg.chat.id, message, {
                    reply_markup: {
                        inline_keyboard: inlineKeyboard,
                    },
                });
        }
    };

    doorbellHandler = async (msg) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "member")) return;

        try {
            let status = await (await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/doorbell`))?.json();

            if (status && !status.error) var message = "üîî –ó–≤–æ–Ω–∏–º –≤ –¥–≤–µ—Ä–Ω–æ–π –∑–≤–æ–Ω–æ–∫";
            else throw Error();
        } catch (error) {
            message = `üîï –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å`;
            logger.error(error);
        } finally {
            this.bot.sendMessage(msg.chat.id, message);
        }
    };

    sayinspaceHandler = async (msg, text) => {
        try {
            if (!text) {
                this.bot.sendMessage(
                    msg.chat.id,
                    `üó£ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–µ –≤ —Å–ø–µ–π—Å–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä #\`/say –ü—Ä–∏–≤–µ—Ç, —Ö–∞–∫–µ—Ä—ã#\``
                );
                return;
            }

            let response = await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/sayinspace`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ text }),
            });

            if (response.status === 200) await this.bot.sendMessage(msg.chat.id, "üó£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–∏–Ω–∞–º–∏–∫");
            else throw Error("Failed to say in space");
        } catch (error) {
            let message = `‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞–∑–∞—Ç—å`;
            await this.bot.sendMessage(msg.chat.id, message);
            logger.error(error);
        }
    };

    playinspaceHandler = async (msg, link) => {
        try {
            if (!link) {
                this.bot.sendMessage(msg.chat.id, `üó£ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ª—é–±–æ–π –∑–≤—É–∫ –ø–æ —Å—Å—ã–ª–∫–µ`);
                return;
            }

            let response = await fetchWithTimeout(`${embassyApiConfig.host}:${embassyApiConfig.port}/playinspace`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ link }),
            });

            if (response.status === 200) await this.bot.sendMessage(msg.chat.id, "üó£ –ó–≤—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–∏–Ω–∞–º–∏–∫");
            else throw Error("Failed to play in space");
        } catch (error) {
            let message = `‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏`;
            await this.bot.sendMessage(msg.chat.id, message);
            logger.error(error);
        }
    };
}

module.exports = EmbassyHanlers;
