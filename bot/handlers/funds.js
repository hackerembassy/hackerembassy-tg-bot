const FundsRepository = require("../../repositories/fundsRepository");
const TextGenerators = require("../../services/textGenerators");
const UsersHelper = require("../../services/usersHelper");
const ExportHelper = require("../../services/export");
const BaseHandlers = require("./base");
const { prepareCurrency, parseMoneyValue } = require("../../utils/currency");
const logger = require("../../services/logger");

const CALLBACK_DATA_RESTRICTION = 20;

class FundsHandlers extends BaseHandlers {
    constructor() {
        super();
    }

    fundsHandler = async (msg) => {
        let funds = FundsRepository.getFunds().filter((p) => p.status === "open");
        let donations = FundsRepository.getDonations();
        let showAdmin =
            UsersHelper.hasRole(msg.from.username, "admin", "accountant") &&
            (this.bot.IsMessageFromPrivateChat(msg) || this.bot.isAdminMode());

        let list = await TextGenerators.createFundList(funds, donations, { showAdmin });

        let message = `‚öí –í–æ—Ç –Ω–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å–±–æ—Ä—ã:
      
${list}üí∏ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –Ω–∞–º –ø–æ–º–æ—á—å - –∂–º–∏ /donate`;

        this.bot.sendLongMessage(msg.chat.id, message);
    };

    fundHandler = async (msg, fundName) => {
        let funds = [FundsRepository.getFundByName(fundName)];
        let donations = FundsRepository.getDonationsForName(fundName);
        let showAdmin =
            UsersHelper.hasRole(msg.from.username, "admin", "accountant") &&
            (this.bot.IsMessageFromPrivateChat(msg) || this.bot.isAdminMode());

        // telegram callback_data is restricted to 64 bytes
        let inlineKeyboard =
            fundName.length < CALLBACK_DATA_RESTRICTION
                ? [
                      [
                          {
                              text: "üßæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                              callback_data: JSON.stringify({
                                  command: "/ef",
                                  params: [fundName],
                              }),
                          },
                          {
                              text: "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É",
                              callback_data: JSON.stringify({
                                  command: "/ed",
                                  params: [fundName],
                              }),
                          },
                      ],
                  ]
                : [];

        let list = await TextGenerators.createFundList(funds, donations, { showAdmin });

        let message = `${list}üí∏ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –Ω–∞–º –ø–æ–º–æ—á—å - –∂–º–∏ /donate`;

        this.bot.sendMessage(msg.chat.id, message, {
            reply_markup: {
                inline_keyboard: inlineKeyboard,
            },
        });
    };

    fundsallHandler = async (msg) => {
        let funds = FundsRepository.getFunds();
        let donations = FundsRepository.getDonations();
        let showAdmin =
            UsersHelper.hasRole(msg.from.username, "admin", "accountant") &&
            (this.bot.IsMessageFromPrivateChat(msg) || this.bot.isAdminMode());

        let list = await TextGenerators.createFundList(funds, donations, { showAdmin, isHistory: true });

        this.bot.sendLongMessage(msg.chat.id, "üíæ –í–æ—Ç –∞—Ä—Ö–∏–≤ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤:\n\n" + list);
    };

    addFundHandler = async (msg, fundName, target, currency) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

        let targetValue = parseMoneyValue(target);
        currency = await prepareCurrency(currency);

        let success = !isNaN(targetValue) && FundsRepository.addFund(fundName, targetValue, currency);
        let message = success
            ? `üí∞ –î–æ–±–∞–≤–ª–µ–Ω —Å–±–æ—Ä ${fundName} —Å —Ü–µ–ª—å—é –≤ ${targetValue} ${currency}`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä (–º–æ–∂–µ—Ç –æ–Ω —É–∂–µ –µ—Å—Ç—å?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    updateFundHandler = async (msg, fundName, target, currency, newFund) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

        let targetValue = parseMoneyValue(target);
        currency = await prepareCurrency(currency);
        let newFundName = newFund?.length > 0 ? newFund : fundName;

        let success = !isNaN(targetValue) && FundsRepository.updateFund(fundName, targetValue, currency, newFundName);
        let message = success
            ? `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–±–æ—Ä ${fundName} —Å –Ω–æ–≤–æ–π —Ü–µ–ª—å—é –≤ ${targetValue} ${currency}`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä (–º–æ–∂–µ—Ç –Ω–µ —Ç–æ –∏–º—è?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    removeFundHandler = (msg, fundName) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

        let success = FundsRepository.removeFund(fundName);
        let message = success ? `üóë –£–¥–∞–ª–µ–Ω —Å–±–æ—Ä ${fundName}` : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    closeFundHandler = (msg, fundName) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

        let success = FundsRepository.closeFund(fundName);
        let message = success ? `‚òëÔ∏è –ó–∞–∫—Ä—ã—Ç —Å–±–æ—Ä ${fundName}` : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    changeFundStatusHandler = (msg, fundName, fundStatus) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

        fundStatus = fundStatus.toLowerCase();

        let success = FundsRepository.changeFundStatus(fundName, fundStatus);
        let message = success ? `‚ú≥Ô∏è –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ ${fundName} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${fundStatus}` : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    transferDonationHandler = (msg, id, accountant) => {
        if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

        accountant = accountant.replace("@", "");

        let success = FundsRepository.transferDonation(id, accountant);
        let message = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–Ω–∞—Ç`;

        if (success) {
            let donation = FundsRepository.getDonationById(id);
            let fund = FundsRepository.getFundById(donation.fund_id);
            message = `‚Ü™Ô∏è –î–æ–Ω–∞—Ç [id:${id}] –ø–µ—Ä–µ–¥–∞–Ω ${this.bot.formatUsername(accountant)}
${this.bot.formatUsername(donation.username)} –¥–æ–Ω–∞—Ç–∏–ª –≤ —Å–±–æ—Ä ${fund.name} –≤ —Ä–∞–∑–º–µ—Ä–µ ${donation.value} ${donation.currency}`;
        }

        this.bot.sendMessage(msg.chat.id, message);
    };

    addDonationHandler = async (msg, value, currency, userName, fundName) => {
        if (!UsersHelper.hasRole(msg.from.username, "accountant")) return;

        value = parseMoneyValue(value);
        currency = await prepareCurrency(currency);
        userName = userName.replace("@", "");
        let accountant = msg.from.username;

        let success = !isNaN(value) && FundsRepository.addDonationTo(fundName, userName, value, currency, accountant);
        let message = success
            ? `üí∏ ${this.bot.formatUsername(userName)} –∑–∞–¥–æ–Ω–∞—Ç–∏–ª ${value} ${currency} –≤ —Å–±–æ—Ä ${fundName}`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç (–º–æ–∂–µ—Ç —Å –≤–∞–ª—é—Ç–æ–π –∏–ª–∏ —Å—É–º–º–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    costsHandler = async (msg, value, currency, userName) => {
        if (!UsersHelper.hasRole(msg.from.username, "accountant")) return;

        value = parseMoneyValue(value);
        currency = await prepareCurrency(currency);
        userName = userName.replace("@", "");
        let fundName = FundsRepository.getLatestCosts().name;
        let accountant = msg.from.username;

        let success = !isNaN(value) && FundsRepository.addDonationTo(fundName, userName, value, currency, accountant);
        let message = success
            ? `üí∏ ${this.bot.formatUsername(userName)} –∑–∞–¥–æ–Ω–∞—Ç–∏–ª ${value} ${currency} –≤ —Å–±–æ—Ä ${fundName}`
            : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç (–º–æ–∂–µ—Ç —Å –≤–∞–ª—é—Ç–æ–π –∏–ª–∏ —Å—É–º–º–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    showCostsHandler = async (msg) => {
        let fundName = FundsRepository.getLatestCosts().name;

        return this.fundHandler(msg, fundName);
    };

    showCostsDonutHandler = async (msg) => {
        let fundName = FundsRepository.getLatestCosts().name;

        return this.exportDonutHandler(msg, fundName);
    };

    removeDonationHandler = (msg, donationId) => {
        if (!UsersHelper.hasRole(msg.from.username, "accountant")) return;

        let success = FundsRepository.removeDonationById(donationId);
        let message = success ? `üóë –£–¥–∞–ª–µ–Ω –¥–æ–Ω–∞—Ç [id:${donationId}]` : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–Ω–∞—Ç (–º–æ–∂–µ—Ç –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    changeDonationHandler = async (msg, donationId, value, currency) => {
        if (!UsersHelper.hasRole(msg.from.username, "accountant")) return;

        value = parseMoneyValue(value);
        currency = await prepareCurrency(currency);

        let success = FundsRepository.updateDonation(donationId, value, currency);
        let message = success ? `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–Ω–∞—Ç [id:${donationId}]` : `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–Ω–∞—Ç (–º–æ–∂–µ—Ç –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ?)`;

        this.bot.sendMessage(msg.chat.id, message);
    };

    exportCSVHandler = async (msg, fundName) => {
        try {
            let csvBuffer = await ExportHelper.exportFundToCSV(fundName);

            if (!csvBuffer?.length) {
                this.bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å");
                return;
            }

            const fileOptions = {
                filename: `${fundName} donations.csv`,
                contentType: "text/csv",
            };

            await this.bot.sendDocument(msg.chat.id, csvBuffer, {}, fileOptions);
        } catch (error) {
            logger.error(error);
            this.bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫");
        }
    };

    exportDonutHandler = async (msg, fundName) => {
        let imageBuffer;
        try {
            imageBuffer = await ExportHelper.exportFundToDonut(fundName);

            if (!imageBuffer?.length) {
                this.bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å");
                return;
            }

            await this.bot.sendPhoto(msg.chat.id, imageBuffer);
        } catch (error) {
            logger.error(error);
            this.bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫");
        }
    };
}

module.exports = FundsHandlers;
