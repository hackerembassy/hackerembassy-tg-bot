const StatusRepository = require("../../repositories/statusRepository");
const UsersRepository = require("../../repositories/usersRepository");
const TextGenerators = require("../../services/textGenerators");
const UsersHelper = require("../../services/usersHelper");
const BaseHandlers = require("./base");
const { openSpace, closeSpace } = require("../../services/statusHelper");
const { isStatusError } = require("../../services/autoInOut");

class StatusHandlers extends BaseHandlers {
  constructor() {
    super();
  }

  setmacHandler(msg, cmd) {
    let message = `‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π MAC –∞–¥—Ä–µ—Å (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)`;
    let username = msg.from.username;
    if (!cmd || cmd === "help") {
      message = `
üì° –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å MAC –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–≤—Ö–æ–¥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–∫–æ–º 

#\`/setmac mac_address#\` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π MAC –∞–¥—Ä–µ—Å (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
#\`/setmac status#\` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ –±–æ—Ç–µ MAC –∞–¥—Ä–µ—Å
#\`/setmac remove#\` - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ MAC –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–æ—Ç–∞  
 `;
    } else if (cmd && UsersRepository.testMACs(cmd) && UsersRepository.setMACs(username, cmd)) {
      message = `üì° MAC –∞–¥—Ä–µ—Å–∞ ${cmd} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}.`;
    } else if (cmd === "remove") {
      UsersRepository.setMACs(username, null);
      UsersRepository.setAutoinside(username, false);
      message = `üóë MAC –∞–¥—Ä–µ—Å–∞ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}. –ê–≤—Ç–æ–≤—Ö–æ–¥ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.`;
    } else if (cmd === "status") {
      let usermac = UsersRepository.getUser(username)?.mac;
      if (usermac) message = `üì≤ –î–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)} –∑–∞–¥–∞–Ω—ã MAC –∞–¥—Ä–µ—Å–∞ ${usermac}`;
      else message = `üì≤ MAC –∞–¥—Ä–µ—Å –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}`;
    }

    this.bot.sendMessage(msg.chat.id, message);
  }

  autoinsideHandler(msg, cmd) {
    let message = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—Ö–æ–¥, —Ö–æ—Ç—è MAC –∑–∞–¥–∞–Ω. –ö—Ç–æ-–Ω–∏–±—É–¥—å, –Ω–∞–∫–æ—Å—Ç—ã–ª—è–π—Ç–µ –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É`;
    let username = msg.from.username;
    let user = UsersRepository.getUser(username);
    let usermac = user?.mac;
    let userautoinside = user?.autoinside;

    if (!cmd || cmd === "help") {
      message = `‚è≤ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –≤ —Å–ø–µ–π—Å–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ MAC –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Å–µ—Ç–∏.
üìå –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏ —Å–ø–µ–π—Å–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ ${
        this.botConfig.timeouts.out / 60000
      } –º–∏–Ω—É—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–≤—ã—Ö–æ–¥ —é–∑–µ—Ä–∞.
üìå –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ–∏—á–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ä—É—á–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞.
‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π—Ç–µ MAC –∞–¥—Ä–µ—Å–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Å–µ—Ç–∏ —Å–ø–µ–π—Å–∞.
      
#\`/setmac#\` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º MAC –∞–¥—Ä–µ—Å–æ–º  
#\`/autoinside status#\` - –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–≤—Ö–æ–¥–∞ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥–∞
#\`/autoinside enable#\` - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—Ö–æ–¥ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥  
#\`/autoinside disable#\` - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—Ö–æ–¥ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥  
`;
    } else if (cmd === "enable") {
      if (!usermac) message = `‚ö†Ô∏è –¢–≤–æ–π MAC –∞–¥—Ä–µ—Å –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π #\`/setmac mac_address#\``;
      else if (UsersRepository.setAutoinside(username, true))
        message = `üï∫ –ê–≤—Ç–æ–≤—Ö–æ–¥ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)} –Ω–∞ MAC –∞–¥—Ä–µ—Å ${usermac}`;
    } else if (cmd === "disable") {
      UsersRepository.setAutoinside(username, false);
      message = `üö∑ –ê–≤—Ç–æ–≤—Ö–æ–¥ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}`;
    } else if (cmd === "status") {
      if (userautoinside)
        message = `üï∫ –ê–≤—Ç–æ–≤—Ö–æ–¥ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)} –Ω–∞ MAC –∞–¥—Ä–µ—Å ${usermac}`;
      else message = `üö∑ –ê–≤—Ç–æ–≤—Ö–æ–¥ –∏ –∞–≤—Ç–æ–≤—ã—Ö–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}`;
    }

    this.bot.sendMessage(msg.chat.id, message);
  }

  statusHandler = async (msg, edit = false) => {
    let state = StatusRepository.getSpaceLastState();

    if (!state) {
      this.bot.sendMessage(msg.chat.id, `üîê –°—Ç–∞—Ç—É—Å —Å–ø–µ–π—Å–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
      return;
    }

    let inside = StatusRepository.getPeopleInside();
    let going = StatusRepository.getPeopleGoing();
    let statusMessage = TextGenerators.getStatusMessage(state, inside, going);

    if (isStatusError())
      statusMessage = `üìµ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ–π—Å–æ–º. –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ \n\n${statusMessage}`;

    let inlineKeyboard = state.open
      ? [
          [
            {
              text: "ü§ù –Ø –ø—Ä–∏—à—ë–ª",
              callback_data: JSON.stringify({ command: "/in" }),
            },
            {
              text: "üëã –Ø —É—à—ë–ª",
              callback_data: JSON.stringify({ command: "/out" }),
            },
          ],
        ]
      : [];

    inlineKeyboard.push([
      {
        text: "üöï –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–π—Ç–∏",
        callback_data: JSON.stringify({ command: "/going" }),
      },
      {
        text: "üõå –£–∂–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é",
        callback_data: JSON.stringify({ command: "/notgoing" }),
      },
    ]);

    inlineKeyboard.push([
      {
        text: "üîÉ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data: JSON.stringify({ command: "/ustatus" }),
      },
      {
        text: state.open ? "üîí –ó–∞–∫—Ä—ã—Ç—å —Å–ø–µ–π—Å" : "üîì –û—Ç–∫—Ä—ã—Ç—å —Å–ø–µ–π—Å",
        callback_data: state.open ? JSON.stringify({ command: "/close" }) : JSON.stringify({ command: "/open" }),
      },
    ]);

    if (edit) {
      try {
        await this.bot.editMessageText(statusMessage, {
          chat_id: msg.chat.id,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: inlineKeyboard,
          },
        });
      } catch {
        // Message was not modified
      }
    } else {
      await this.bot.sendMessage(msg.chat.id, statusMessage, {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      });
    }
  };

  openHandler = (msg) => {
    if (!UsersHelper.hasRole(msg.from.username, "member")) return;

    openSpace(msg.from.username, { checkOpener: true });

    let inlineKeyboard = [
      [
        {
          text: "ü§ù –Ø –ø—Ä–∏—à—ë–ª",
          callback_data: JSON.stringify({ command: "/in" }),
        },
        {
          text: "üîí –ó–∞–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞",
          callback_data: JSON.stringify({ command: "/close" }),
        },
      ],
      [
        {
          text: "üìπ –ö—Ç–æ –≤–Ω—É—Ç—Ä–∏",
          callback_data: JSON.stringify({ command: "/status" }),
        },
      ],
    ];

    this.bot.sendMessage(
      msg.chat.id,
      `üîë ${this.bot.formatUsername(msg.from.username)} #*–æ—Ç–∫—Ä—ã–ª#* —Å–ø–µ–π—Å –¥–ª—è –≥–æ—Å—Ç–µ–π. –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –∑–∞–π—Ç–∏`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      }
    );
  };

  closeHandler = (msg) => {
    if (!UsersHelper.hasRole(msg.from.username, "member")) return;

    closeSpace(msg.from.username, { evict: true });

    let inlineKeyboard = [
      [
        {
          text: "üîì –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞",
          callback_data: JSON.stringify({ command: "/open" }),
        },
      ],
    ];

    this.bot.sendMessage(
      msg.chat.id,
      `üîí ${this.bot.formatUsername(msg.from.username)} #*–∑–∞–∫—Ä—ã–ª#* —Å–ø–µ–π—Å. –í—Å–µ –æ—Ç–º–µ—Ç–∏–≤—à–∏–µ—Å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–æ–º–æ–π`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      }
    );
  };

  evictHandler = (msg) => {
    if (!UsersHelper.hasRole(msg.from.username, "member")) return;

    StatusRepository.evictPeople();

    this.bot.sendMessage(msg.chat.id, `üîí –°–ø–∏—Å–æ–∫ –æ—Ç–º–µ—Ç–∏–≤—à–∏—Ö—Å—è –æ—á–∏—â–µ–Ω`);
  };

  inHandler = (msg) => {
    let eventDate = new Date();
    let user = msg.from.username ?? msg.from.first_name;
    let gotIn = this.LetIn(user, eventDate);
    let autoinsideText = `üì≤ –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /autoinside —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å—Å—è –≤ —Å–ø–µ–π—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;
    let message = `ü§ù ${this.bot.formatUsername(user)} –ø—Ä–∏—à–µ–ª –≤ —Å–ø–µ–π—Å\n\n${autoinsideText}`;

    if (!gotIn) {
      message = "üîê –°–µ–π—á–∞—Å —Å–ø–µ–π—Å –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –≥–æ—Å—Ç–µ–π";
    }

    let inlineKeyboard = gotIn
      ? [
          [
            {
              text: "ü§ù –ò —è –ø—Ä–∏—à—ë–ª",
              callback_data: JSON.stringify({ command: "/in" }),
            },
            {
              text: "üëã –ê —è —É—à—ë–ª",
              callback_data: JSON.stringify({ command: "/out" }),
            },
          ],
          [
            {
              text: "üìπ –ö—Ç–æ –≤–Ω—É—Ç—Ä–∏",
              callback_data: JSON.stringify({ command: "/status" }),
            },
          ],
        ]
      : [
          [
            {
              text: "üîÉ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
              callback_data: JSON.stringify({ command: "/in" }),
            },
            {
              text: "üö™ –û—Ç–∫—Ä—ã—Ç—å —Å–ø–µ–π—Å",
              callback_data: JSON.stringify({ command: "/open" }),
            },
          ],
        ];

    this.bot.sendMessage(msg.chat.id, message, {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    });
  };

  outHandler = (msg) => {
    let eventDate = new Date();
    let gotOut = this.LetOut(msg.from.username, eventDate);
    let message = `üëã ${this.bot.formatUsername(msg.from.username)} —É—à–µ–ª –∏–∑ —Å–ø–µ–π—Å–∞`;

    if (!gotOut) {
      message = "üîê –°—Ç—Ä–∞–Ω–Ω–æ, —Ç—ã –∂–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏...";
    }

    let inlineKeyboard = gotOut
      ? [
          [
            {
              text: "üëã –Ø —Ç–æ–∂–µ —É—à—ë–ª",
              callback_data: JSON.stringify({ command: "/out" }),
            },
            {
              text: "ü§ù –ê —è –ø—Ä–∏—à—ë–ª",
              callback_data: JSON.stringify({ command: "/in" }),
            },
          ],
          [
            {
              text: "üìπ –ö—Ç–æ –≤–Ω—É—Ç—Ä–∏",
              callback_data: JSON.stringify({ command: "/status" }),
            },
          ],
        ]
      : [
          [
            {
              text: "üîÉ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
              callback_data: JSON.stringify({ command: "/out" }),
            },
            {
              text: "üîì –û—Ç–∫—Ä—ã—Ç—å —Å–ø–µ–π—Å",
              callback_data: JSON.stringify({ command: "/open" }),
            },
          ],
        ];

    this.bot.sendMessage(msg.chat.id, message, {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    });
  };

  inForceHandler = (msg, username) => {
    if (!UsersHelper.hasRole(msg.from.username, "member")) return;
    username = username.replace("@", "");
    let eventDate = new Date();

    let gotIn = this.LetIn(username, eventDate, true);

    let message = `üü¢ ${this.bot.formatUsername(msg.from.username)} –ø—Ä–∏–≤—ë–ª ${this.bot.formatUsername(username)} –≤ —Å–ø–µ–π—Å`;

    if (!gotIn) {
      message = "üîê –°–æ—Ä—è–Ω, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–µ–π—á–∞—Å –µ–≥–æ –ø—Ä–∏–≤–µ—Å—Ç–∏";
    }
    this.bot.sendMessage(msg.chat.id, message);
  };

  outForceHandler = (msg, username) => {
    if (!UsersHelper.hasRole(msg.from.username, "member")) return;
    let eventDate = new Date();
    username = username.replace("@", "");
    let gotOut = this.LetOut(username, eventDate, true);

    let message = `üî¥ ${this.bot.formatUsername(msg.from.username)} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–º–æ–π ${this.bot.formatUsername(username)}`;

    if (!gotOut) {
      message = "üîê –≠—ç –Ω–µ–µ, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–æ–π";
    }

    this.bot.sendMessage(msg.chat.id, message);
  };

  LetIn(username, date, force = false) {
    // check that space is open
    let state = StatusRepository.getSpaceLastState();

    if (!state?.open && !UsersHelper.hasRole(username, "member") && !force) return false;

    let userstate = {
      status: StatusRepository.UserStatusType.Inside,
      date: date,
      username: username,
      type: force ? StatusRepository.ChangeType.Force : StatusRepository.ChangeType.Manual,
    };

    StatusRepository.pushPeopleState(userstate);

    return true;
  }

  LetOut(username, date, force = false) {
    let state = StatusRepository.getSpaceLastState();

    if (!state?.open && !UsersHelper.hasRole(username, "member") && !force) return false;

    let userstate = {
      status: StatusRepository.UserStatusType.Outside,
      date: date,
      username: username,
      type: force ? StatusRepository.ChangeType.Force : StatusRepository.ChangeType.Manual,
    };

    StatusRepository.pushPeopleState(userstate);

    return true;
  }

  goingHandler = (msg) => {
    let username = msg.from.username.replace("@", "");
    let eventDate = new Date();

    let userstate = {
      status: StatusRepository.UserStatusType.Going,
      date: eventDate,
      username: username,
      type: StatusRepository.ChangeType.Manual,
    };

    StatusRepository.pushPeopleState(userstate);

    let message = `üöï ${this.bot.formatUsername(msg.from.username)} –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∑–∞–π—Ç–∏ –≤ —Å–ø–µ–π—Å`;

    let inlineKeyboard = [
      [
        {
          text: "üöï –ò —è –ø–ª–∞–Ω–∏—Ä—É—é",
          callback_data: JSON.stringify({ command: "/going" }),
        },
        {
          text: "‚ùì–ê –∫—Ç–æ –µ—â–µ –±—É–¥–µ—Ç?",
          callback_data: JSON.stringify({ command: "/status" }),
        },
      ],
    ];

    this.bot.sendMessage(msg.chat.id, message, {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    });
  };

  notGoingHandler = (msg) => {
    let username = msg.from.username.replace("@", "");
    let eventDate = new Date();

    let userstate = {
      status: StatusRepository.UserStatusType.Outside,
      date: eventDate,
      username: username,
      type: StatusRepository.ChangeType.Manual,
    };

    StatusRepository.pushPeopleState(userstate);

    let message = `üõå ${this.bot.formatUsername(msg.from.username)} –±–æ–ª—å—à–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ —Å–ø–µ–π—Å`;

    this.bot.sendMessage(msg.chat.id, message);
  };

  setemojiHandler(msg, emoji) {
    if (!UsersHelper.hasRole(msg.from.username, "member")) return;

    let message = `‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —ç–º–æ–¥–∑–∏ –∞–¥—Ä–µ—Å`;
    let username = msg.from.username;
    if (!emoji || emoji === "help") {
      message = `
üê• –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —ç–º–æ–¥–∑–∏ 

#\`/setemoji üçó#\` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —ç–º–æ–¥–∑–∏ 
#\`/setemoji status#\` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ –±–æ—Ç–µ —ç–º–æ–¥–∑–∏
#\`/setemoji remove#\` - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —ç–º–æ–¥–∑–∏ –∏–∑ –±–æ—Ç–∞  
 `;
    } else if (emoji && isEmoji(emoji) && UsersRepository.setEmoji(username, emoji)) {
      message = `üê• –≠–º–æ–¥–∑–∏ ${emoji} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}.`;
    } else if (emoji === "remove") {
      UsersRepository.setEmoji(username, null);
      message = `üóë –≠–º–æ–¥–∑–∏ —É–¥–∞–ª–µ–Ω –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}.`;
    } else if (emoji === "status") {
      let emoji = UsersRepository.getUser(username)?.emoji;

      if (emoji) message = `üê• –î–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)} –∑–∞–¥–∞–Ω —ç–º–æ–¥–∑–∏ ${emoji}`;
      else message = `üê• –≠–º–æ–¥–∑–∏ –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è —é–∑–µ—Ä–∞ ${this.bot.formatUsername(username)}`;
    }

    this.bot.sendMessage(msg.chat.id, message);
  }
}

function isEmoji(message) {
  return /[\u{1f300}-\u{1f5ff}\u{1f900}-\u{1f9ff}\u{1f600}-\u{1f64f}\u{1f680}-\u{1f6ff}\u{2600}-\u{26ff}\u{2700}-\u{27bf}\u{1f1e6}-\u{1f1ff}\u{1f191}-\u{1f251}\u{1f004}\u{1f0cf}\u{1f170}-\u{1f171}\u{1f17e}-\u{1f17f}\u{1f18e}\u{3030}\u{2b50}\u{2b55}\u{2934}-\u{2935}\u{2b05}-\u{2b07}\u{2b1b}-\u{2b1c}\u{3297}\u{3299}\u{303d}\u{00a9}\u{00ae}\u{2122}\u{23f3}\u{24c2}\u{23e9}-\u{23ef}\u{25b6}\u{23f8}-\u{23fa}]/u.test(
    message
  );
}

module.exports = StatusHandlers;
