- name: volumes exist
  docker_volume:
    name: "{{ item }}"
  with_items: "{{ docker_volumes }}"


- name: config updated
  block:
    - name: config temporary dir
      tempfile:
        state: directory
      register: config_volume_mount
      changed_when: no
      check_mode: no

    - name: config volume proxy
      docker_container:
        name: "{{ config_volume_proxy_container_name }}"
        image: busybox
        detach: yes
        tty: yes
        auto_remove: yes
        volumes:
          - "{{ config_volume }}:/v"
      changed_when: no
      check_mode: no

    - name: extract config from volume
      command:
        cmd: "docker cp {{ config_volume_proxy_container_name }}:/v {{ config_volume_mount.path }}"
      changed_when: no
      check_mode: no

    - name: update templates
      template:
        src: "{{ item.src }}"
        dest: "{{ config_volume_mount.path }}/v/{{ item.dest }}"
        mode: "644"
      with_items: "{{ config_volume_templates }}"
      when: config_volume_templates is defined
      register: templates_update

    - name: update files
      copy:
        src: "{{ item.src }}"
        dest: "{{ config_volume_mount.path }}/v/{{ item.dest }}"
        mode: "644"
      with_items: "{{ config_volume_files }}"
      when: config_volume_files is defined
      register: files_update

    - name: return config to volume
      shell: |
        docker cp {{ config_volume_mount.path }}/v {{ config_volume_proxy_container_name }}:/
        docker exec {{ config_volume_proxy_container_name }} chown -R {{ config_owner }}:{{ config_owner }} /v
      when: templates_update.changed or files_update.changed

    - name: remove config volume proxy
      docker_container:
        name: "{{ config_volume_proxy_container_name }}"
        state: absent
      changed_when: no
      check_mode: no

    - name: remove config temporary dir
      file:
        path: "{{ config_volume_mount.path }}"
        state: absent
      changed_when: no
      check_mode: no


- name: container updated
  block:
    - name: got container info
      docker_container_info:
        name: "{{ service_name }}"
      register: container_info

    - name: remove existing container
      docker_container:
        name: "{{ service_name }}"
        state: absent
      when: container_info.exists

    - name: docker-compose up
      docker_compose:
        project_name: "{{ service_name }}"
        pull: yes
        definition: "{{ docker_compose_definition }}"
  tags: container
