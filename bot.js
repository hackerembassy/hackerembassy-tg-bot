require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const StatusRepository = require("./repositories/statusRepository");
const UsersRepository = require("./repositories/usersRepository");
const FundsRepository = require("./repositories/fundsRepository");
const TextGenerators = require("./services/textGenerators");
const UsersHelper = require("./services/usersHelper");

const TOKEN = process.env["HACKERBOTTOKEN"];
const IsDebug = process.env["BOTDEBUG"] === "true";
process.env.TZ = "Asia/Yerevan";

const bot = new TelegramBot(TOKEN, { polling: true });

bot.onText(/^\/(start|help)(@.+?)?$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `üõ† –ü—Ä–∏–≤–µ—Ç —Ö–∞–∫–µ—Ä—á–∞–Ω. –Ø –Ω–æ–≤—ã–π –±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –≤—Å—è–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Å–ø–µ–π—Å–µ. 
[–Ø –µ—â–µ –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–æ–µ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ —Å–ø–µ–π—Å–∞].
–î–µ—Ä–∂–∏ –º–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n` +
      UsersHelper.getAvailableCommands(msg.from.username)
  );
});

bot.onText(/^\/(about)(@.+?)?$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `Hacker Embassy (–ï—Ä–µ–≤–∞–Ω—Å–∫–∏–π –•–∞–∫—Å–ø–µ–π—Å) - —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏, —É–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º.
–ú—ã –≤–º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –¥–µ–ª–∏–º—Å—è –∏–¥–µ—è–º–∏ –∏ –∑–Ω–∞–Ω–∏—è–º–∏, –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–µ–º—Å—è.
–¢—ã –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ https://hackerembassy.site/
–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º :)`
  );
});

bot.onText(/^\/(donate)(@.+?)?$/, (msg) => {
  let accountants = UsersRepository.getUsersByRole("accountant");
  let accountantsList = "";

  if (accountants!==null){
    accountantsList = accountants.reduce((list, user)=> `${list}@${user.username}\n`, "");
  }

  bot.sendMessage(
    msg.chat.id,
    `–•–∞–∫—Å–ø–µ–π—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
–ú—ã –≤–Ω–æ—Å–∏–º —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ö–∞–∫—Å–ø–µ–π—Å–∞: –æ–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã –∏ –∫–æ–º–º—É–Ω–∞–ª–∫–∏, –∑–∞–±–æ—Ç–∞ –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –ø–æ–º–æ—â—å –≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ª—é–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞–º –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã Visa/Mastercard –ê—Ä–º–µ–Ω–∏–∏, –∫—Ä–∏–ø—Ç—ã –∏–ª–∏ –Ω–∞–ª–∏—á–∫–∏ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ–Ω–∞—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É.\n`+accountantsList
  );
});

// State
bot.onText(/^\/status(@.+?)?$/, (msg) => {
  let state = StatusRepository.getSpaceLastState();

  if (!state) {
    bot.sendMessage(msg.chat.id, `üîê –°—Ç–∞—Ç—É—Å —Å–ø–µ–π—Å–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω üîê`);
    return;
  }

  let inside = StatusRepository.getPeopleInside();

  let stateText = state.open ? "–æ—Ç–∫—Ä—ã—Ç" : "–∑–∞–∫—Ä—ã—Ç";
  let insideText =
    inside.length > 0
      ? "üë®‚Äçüíª –í–Ω—É—Ç—Ä–∏ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å:\n"
      : "üõå –í–Ω—É—Ç—Ä–∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è\n";
  for (const user of inside) {
    insideText += `@${user.username}\n`;
  }
  bot.sendMessage(
    msg.chat.id,
    `üîê –°–ø–µ–π—Å ${stateText} —é–∑–µ—Ä–æ–º @${state.changedby} üîê
üóì –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${state.date.toLocaleString()}
` + insideText
  );
});

bot.onText(/^\/open(@.+?)?$/, (msg) => {
  if (!UsersHelper.hasRole(msg.from.username, "member")) return;
  let opendate = new Date();
  let state = {
    open: true,
    date: opendate,
    changedby: msg.from.username,
  };

  StatusRepository.pushSpaceState(state);

  let userstate = {
    inside: true,
    date: opendate,
    username: msg.from.username,
  };

  StatusRepository.pushPeopleState(userstate);

  bot.sendMessage(
    msg.chat.id,
    `üîë –Æ–∑–µ—Ä @${state.changedby} –æ—Ç–∫—Ä—ã–ª —Å–ø–µ–π—Å üîë
üóì –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${state.date.toLocaleString()} `
  );
});

bot.onText(/^\/close(@.+?)?$/, (msg) => {
  if (!UsersHelper.hasRole(msg.from.username, "member")) return;
  let state = {
    open: false,
    date: new Date(),
    changedby: msg.from.username,
  };

  StatusRepository.pushSpaceState(state);
  StatusRepository.evictPeople();

  bot.sendMessage(
    msg.chat.id,
    `üîì –Æ–∑–µ—Ä @${state.changedby} –∑–∞–∫—Ä—ã–ª —Å–ø–µ–π—Å üîì
üóì –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${state.date.toLocaleString()}`
  );
});

bot.onText(/^\/in(@.+?)?$/, (msg) => {
  // check that space is open
  let state = StatusRepository.getSpaceLastState();
  if (!state?.open) {
    let message = !state ? 
      "üîê –°—Ç–∞—Ç—É—Å —Å–ø–µ–π—Å–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—Ö–æ–¥–∏—Ç—å! üîê" : 
      "üîê –°–ø–µ–π—Å –∑–∞–∫—Ä—ã—Ç, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—Ö–æ–¥–∏—Ç—å! üîê";
    bot.sendMessage(msg.chat.id, message);
    return;
  }
  let userstate = {
    inside: true,
    date: new Date(),
    username: msg.from.username,
  };

  StatusRepository.pushPeopleState(userstate);

  bot.sendMessage(
    msg.chat.id,
    `üü¢ –Æ–∑–µ—Ä @${userstate.username} –ø—Ä–∏—à–µ–ª –≤ —Å–ø–µ–π—Å üü¢
üóì –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${userstate.date.toLocaleString()} `
  );
});

bot.onText(/^\/out(@.+?)?$/, (msg) => {
  let userstate = {
    inside: false,
    date: new Date(),
    username: msg.from.username,
  };

  StatusRepository.pushPeopleState(userstate);

  bot.sendMessage(
    msg.chat.id,
    `üî¥ –Æ–∑–µ—Ä @${userstate.username} —É—à–µ–ª –∏–∑ —Å–ø–µ–π—Å–∞ üî¥
üóì –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${userstate.date.toLocaleString()} `
  );
});

// User management
bot.onText(/^\/getUsers(@.+?)?$/, (msg, match) => {
  let users = UsersRepository.getUsers();

  let userList = "";

  for (const user of users) {
    userList += `@${user.username} ${user.roles}\n`;
  }

  bot.sendMessage(msg.chat.id, `–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n` + userList);
});

bot.onText(/^\/addUser(@.+?)? (\S+?) as (\S+)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

  let username = match[2].replace("@", "");
  let roles = match[3].split("|");

  let success = UsersRepository.addUser(username, roles);
  let message = success
    ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ ${roles}`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –æ–Ω —É–∂–µ –µ—Å—Ç—å?)`;

  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/updateRoles(@.+?)? of (\S+?) to (\S+)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

  let username = match[2].replace("@", "");
  let roles = match[3].split("|");

  let success = UsersRepository.updateRoles(username, roles);
  let message = success
    ? `–†–æ–ª–∏ @${username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ ${roles}`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏`;

  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/removeUser(@.+?)? (\S+)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin")) return;

  let username = match[2].replace("@", "");

  let success = UsersRepository.removeUser(username);
  let message = success
    ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–¥–∞–ª–µ–Ω`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ?)`;

  bot.sendMessage(msg.chat.id, message);
});
//funds

bot.onText(/^\/funds(@.+?)?$/, async (msg) => {
  let funds = FundsRepository.getfunds().filter(
    (p) => p.status === "open"
  );
  let donations = FundsRepository.getDonations();

  let list = await TextGenerators.createFundList(funds, donations);

  bot.sendMessage(msg.chat.id, "‚öí –í–æ—Ç –Ω–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å–±–æ—Ä—ã:\n\n" + list);
});

bot.onText(/^\/fundsAll(@.+?)?$/, async (msg) => {
  let funds = FundsRepository.getfunds();
  let donations = FundsRepository.getDonations();

  let list = await TextGenerators.createFundList(funds, donations);

  bot.sendMessage(msg.chat.id, "‚öí –í–æ—Ç –≤—Å–µ –Ω–∞—à–∏ —Å–±–æ—Ä—ã:\n\n" + list);
});

bot.onText(/^\/addFund(@.+?)? (.*\S) with target (\d+)(\D*)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

  let fundName = match[2];
  let targetValue = match[3];

  let success = FundsRepository.addfund(fundName, targetValue);
  let message = success
    ? `–î–æ–±–∞–≤–ª–µ–Ω —Å–±–æ—Ä ${fundName} —Å —Ü–µ–ª—å—é –≤ ${targetValue} AMD`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä (–º–æ–∂–µ—Ç –æ–Ω —É–∂–µ –µ—Å—Ç—å?)`;

  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/removeFund(@.+?)? (.*\S)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

  let fundName = match[2];

  let success = FundsRepository.removefund(fundName);
  let message = success
    ? `–£–¥–∞–ª–µ–Ω —Å–±–æ—Ä ${fundName}`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä`;

  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/closeFund(@.+?)? (.*\S)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;
  let fundName = match[2];

  let success = FundsRepository.closefund(fundName);
  let message = success
    ? `–ó–∞–∫—Ä—ã—Ç —Å–±–æ—Ä ${fundName}`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä`;

  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/changeFundStatus(@.+?)? of (.*\S) to (.*\S)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "admin", "accountant")) return;

  let fundName = match[2];
  let fundStatus = match[3].toLowerCase();

  let success = FundsRepository.changefundStatus(
    fundName,
    fundStatus
  );
  let message = success
    ? `–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ ${fundName} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${fundStatus}`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞`;

  bot.sendMessage(msg.chat.id, message);
});

bot.onText(
  /^\/addDonation(@.+?)? (\d+?)(\D*?) from (\S+?) to (.*\S)$/,
  async (msg, match) => {
    if (!UsersHelper.hasRole(msg.from.username, "accountant")) return;

    let value = match[2];
    let currency = match[3];
    let userName = match[4].replace("@", "");
    let fundName = match[5];

    let success = FundsRepository.addDonationTo(
      fundName,
      userName,
      value
    );
    let message = success
      ? `–î–æ–±–∞–≤–ª–µ–Ω –¥–æ–Ω–∞—Ç ${value}${currency} –æ—Ç @${userName} –≤ —Å–±–æ—Ä ${fundName}`
      : `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç`;

    bot.sendMessage(msg.chat.id, message);
  }
);

bot.onText(/^\/removeDonation(@.+?)? (\d+)$/, (msg, match) => {
  if (!UsersHelper.hasRole(msg.from.username, "accountant")) return;

  let donationId = match[2];

  let success = FundsRepository.removeDonationById(donationId);
  let message = success
    ? `–£–¥–∞–ª–µ–Ω –¥–æ–Ω–∞—Ç [id:${donationId}]`
    : `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–Ω–∞—Ç (–º–æ–∂–µ—Ç –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ?)`;

  bot.sendMessage(msg.chat.id, message);
});

// Debug echoing of received messages
IsDebug &&
  bot.on("message", (msg) => {
    bot.sendMessage(
      msg.chat.id,
      `Debug: Received from ${msg.chat.id} message ${msg.text}`
    );
  });
